Этот документ содержит список того, что по моему предствлению необходимо сделать для завершения
проекта Peek-To-Meer (PicWorld), на данный момент клона LightBot, кодовое название: HellRobot.

Что в моем представлении завершение проекта: доведение до состояния, когда можно выложить в
Android Market (Google Play), чтоб все видели какое у нас зашибись приложение.
Как только проект будет доведен до этого состояния, можно дальше делать что угодно: раздавать
школам, делать какое-то там машинное обучение (Machine Learing/Automobile Education), чтоб
подсовывать детям уровни игрушки по их способностям и все остальное.

Зачем (по моему представлению) мы делаем этот клон: чтоб про него можно было сказать, что "мы
сделали образовательную игрушку" и написать на ней "развивает чего-нибудь" (качает статы, как
говорится).

Часть I. Основное приложение.

Приложение на платформе Android.
Предлагается система уровней: игрок проходит один за другим, доступны всегда ближайшие непройденные
несколько уровней (схема прохождения как в играх Supaplex/Safrosoft ROX)

1. Возможность постить в твиттер/вконтакт. Вознаграждение - большее количество доступных уровней в
каждый конкретный момент.

Комментарий: надо кому-то сесть и разобраться, насколько это сложно. Наверняка есть куча готового
кода. Хотя, Вова смотрел и понял, что там есть и грустные моменты - в частности у каждой соцсети
свои API, но общая авторизация OAuth или какое-то похожее название.

2. Главное меню, меню выбора уровней, меню настроек, экран с портретами создателей.

Комментарий: требуются базовые знания API Android-a, но надо сделать красиво.

3. Логин в игру через гугл-аккаунт. В любом случае, если у человека андроид, то у него есть такой
аккаунт и по ним можно вести статистику аки по девайсам (сколько и какие уровни он прошел, насколько
сильно она его затягивает).

Комментарий: вопрос лишь в том, имеет ли приложение возможность запрашивать данные аккаунта при
установке или придется просить пользователя честно вбить свой емейл.

4. Допилить HUD, то есть интерфейс программирования робота. Нужны кнопки: Play/Pause и центрирования
камеры на робота. Также добавить кнопку для прыжка (в движке код для этого написан, но кнопки пока
нет). Также надо пофиксить перетаскивание команд. Чтобы понять, как оно должно работать, возьмите в
руки лбой девайс с огрызком яблока на задней крышке и посмотрите, как там таскаются иконки. Так вот
надо также.

Комментарий: надо разбираться в коде Вовы в этом месте, так как всю логику взаимодействия этих
кнопок написал он.

5. Известные мелкие и не очень баги/таски, которые я правлю сам по мере наличия у меня времени.
 - правая зона реагирует на управление камерой
 - при рестарте уровня не сбрасываются состояния зажигаемых клеток.
 - если код программы пуст, то ее запуск валит приложение.
 - (чисто рефакторинг): использовать в рендерере новый класс камеры вместо нескольких тупых
float-переменных
 - To be added...

6. Управление камерой. На данный момент камера проходит сквозь все стены, а не хочется.
Для начала можно поставить базовые проверки, но по-хорошему надо проверять на столкновение с
объектами сцены и фиксить направление ее движения.

Комментарий: возможно, это тоже сделаю я.

7. Контент. Нужная некоторая механическая работа, а именно: найти текстуры, найти модельку робота в
интернете (или у вас есть моделлер?) и сделать базовый комплект уровней, скопировав их с лайтбота
либо руками вбив в json, либо написав редактор уровней перед этим ;-)
Также нужны пиктограммы для обозначения команд робота.

8. Звук. Вроде бы для его добавления не должно быть ничего сложного, так что надо просто разобраться
с API Android-a и понять, что он вообще умеет. Далее найти звуков и добавить их в проект. Кодить тут
надо кажется что не очень много.

9. (Косметическое) В такой игрушке должен быть туториал-набор простых уровней и инструкции-вставки с
объяснениями между ними.

10. Разобраться со сворачиванием/разворачиванием приложения и сохранением состояния при закрытии на
диск или в облако на сервер (см. ниже).

11. Придумать систему ачивментов за что-нибудь (разбил робота 150 раз - Achievement Unlocked!!),
и также добавить это к проекту.

Часть II. Серверная часть.

Нужна только для хранения базы пользователей и сбора статистики.
Нужно сделать просто сайт, например, на appspot.com, куда приложение будет сливать инфу о прогрессе
пользователей и том как они решают уровни, а также таблицы лучших результатов. Также через него
можно распространять новые комплекты уровней.

Комментарий: нужно знать Python (можно на Java или Go, но я прогал свой http://miptgirls.appspot.com
на питоне и в случае необходимости подключения меня, мне будет проще).

Часть III. Инструменты (Tools)

1. Как минимум нужен редактор уровней. Простенькое оконное приложение, типа накидать кнопок на формочку
и научиться экспортить в json. Есть заготовка на питоне. Плюс питона - будет работать и у меня на
маке, и на других линуксах, и на винде.

2. Также интересная идея сделать генератор уровней и автоматический их солвер, можно будет сделать
здоровенную библиотеку уровней и затянуть игрока надолго.

Комментарий: задача в самый раз для тех, кто фанатеет по олимпиадному программированию, хотя ничего
сложного в ней нет, так как по времени мы неограничены. Если взглянуть немного в будущее, то я
думаю, что в "язык программирования" этого робота будут со временем добавляться новые команды вроде
цикла или возможности разнести стену ракетой, если робот он не может проехать, так что надо писать
во-первых максимально расширяемый код, а во-вторых, потенциально распараллеливаемый (то есть солвер
выделить в отдельный класс и все такое), поскольку с увеличением возможностей робота, число уровней
растет экспоненциально.

Примечание: это задача третьего плана, для начала можно позаимствовать уровни у лайтбота или
оригинального пиктомира.
